#===========================================================================
# ESAPI Encoder
#
# ESAPI canonicalizes input before validation to prevent bypassing filters with encoded attacks.
# Failure to canonicalize input is a very common mistake when implementing validation schemes.
# Canonicalization is automatic when using the ESAPI Validator, but you can also use the
# following code to canonicalize data.
#
#      ESAPI.Encoder().canonicalize( "%22hello world&#x22;" );
#

# Enable/disable encoder
esapi.Encoder.enable=true

# Multiple encoding is when a single encoding format is applied multiple times. Allowing
# multiple encoding is strongly discouraged.
esapi.Encoder.AllowMultipleEncoding=false

# Mixed encoding is when multiple different encoding formats are applied, or when
# multiple formats are nested. Allowing multiple encoding is strongly discouraged.
esapi.Encoder.AllowMixedEncoding=false

# The default list of codecs to apply when canonicalizing untrusted data. The list should include the codecs
# for all downstream interpreters or decoders. For example, if the data is likely to end up in a URL, HTML, or
# inside JavaScript, then the list of codecs below is appropriate. The order of the list is not terribly important.
esapi.Encoder.DefaultCodecList=HTMLEntityCodec,PercentCodec,JavaScriptCodec

#===========================================================================
# ESAPI CSRF protection

# Enable/disable CSRF
# Temporary disabled, enable and configure to protect the jsp pages, e.g. report.jsp
esapi.CSRF.enable=false
# Leave commented to protect all methods, otherwise only the methods defined in the list will be checked.
#esapi.CSRF.protectedmethods=POST, PUT, DELETE
# true to only protect pages marked as protected, false to protect all but the one's marked as unprotected.
esapi.CSRF.protect=true

# Protected/Unprotected Pages:
#
# The unprotected pages property (esapi.CSRF.unprotected.*) defines a series of pages that
# should not be protected by CSRFManager. Such configurations are useful when the CSRFFilter is
# aggressively mapped (ex: /*). The syntax of the property name is esapi.CSRF.unprotected.[PageName],
# where PageName is some arbitrary identifier that can be used to reference a resource. The syntax of
# defining the uri of unprotected pages is the same as the syntax used by the JavaEE container for uri mapping.
# Specifically, CSRFManager will identify the first match (if any) between the requested uri and an unprotected
# page in order of declaration. Match criteria is as follows:
#
# Case 1: exact match between request uri and unprotected page
# Case 2: longest path prefix match, beginning / and ending /*
# Case 3: extension match, beginning *.
#
# The following code snippet illustrates the three use cases over four examples. The first two examples
# (Tag and JavaScriptServlet) look for direct URI matches. The third example (Html) looks for all resources
# ending in a .html extension. The last example (Public) looks for all resources prefixed with the URI path /MySite/Public/*.
#
# org.owasp.csrfguard.unprotected.Tag=/Owasp.CsrfGuard.Test/tag.jsp
# org.owasp.csrfguard.unprotected.JavaScriptServlet=/Owasp.CsrfGuard.Test/JavaScriptServlet
# org.owasp.csrfguard.unprotected.Html=*.html
# org.owasp.csrfguard.unprotected.Public=/MySite/Public/*

#esapi.CSRF.protected.Jsp=*.jsp
esapi.CSRF.protected.ValidationServlet=/validation/validate

# Disable ajax support, since we don't use Ajax in CSWProxy.
esapi.CSRF.ajax.enable=false
#esapi.CSRF.ajax.cookie=csrftoken
#esapi.CSRF.ajax.header=X-CSRFToken
esapi.CSRF.request.param=CSRFToken
esapi.CSRF.session.key=CSRFTOKEN_SESSION_KEY

#===========================================================================
# File upload configuration (StandardUploadManager configuration)

esapi.UploadManager.enabled=false

# Default file upload final location
esapi.UploadManager.UploadDir=${gn.path}/data/upload/final
# Temp directory for file uploads, leave empty to use java.io.tempdir
# let this default to java.io.tmpdir for testing
esapi.UploadManager.UploadTempDir=${gn.path}/data/upload/final/temp
# Default allowed file extensions, may be overridden in code
esapi.UploadManager.AllowedExtensions=.xml
# Max allowed size per request 5MB (Each request can contain multiple files)
esapi.UploadManager.MaxUploadRequestBytes=5242880
# Max allowed size for each file 1MB (Each request can contain multiple files)
esapi.UploadManager.MaxUploadFileBytes=1048576

